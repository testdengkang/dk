<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
		PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
		"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- 导入数据库配置文件 -->
	<!--<properties resource="config/jdbc.properties" />-->

	<context id="default" targetRuntime="MyBatis3Simple" defaultModelType="flat">
		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
		<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />

		<commentGenerator>
			<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
-->
			<property name="autoDelimitKeywords" value="false"/>
			<!-- 生成的Java文件的编码-->
			<property name="javaFileEncoding" value="UTF-8"/>
			<!-- 格式化java代码-->
			<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

			<!-- 格式化XML代码-->
			<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
			<property name="suppressDate" value="true" />

			<!--beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
			<property name="beginningDelimiter" value="`"/>

			<property name="endingDelimiter" value="`"/>
			<!--  关闭自动生成的注释  -->
			<property name="suppressAllComments" value="true" />
		</commentGenerator>

		<!-- JDBC 连接 -->
		<!--<jdbcConnection connectionURL="jdbc:oracle:thin:@192.168.10.69:1521:orcl" driverClass="oracle.jdbc.driver.OracleDriver" password="oRcl_123" userId="sportsgame_bet" />-->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
						connectionURL=""
						userId="" password="">
		</jdbcConnection>
		<javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
			<!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                   scale>0;length>18：使用BigDecimal;
                   scale=0;length[10,18]：使用Long；
                   scale=0;length[5,9]：使用Integer；
                   scale=0;length<5：使用Short；
             -->
			<property name="forceBigDecimals" value="true"/>
		</javaTypeResolver>
		<!-- java对象 -->
		<!-- java模型创建器，是必须要的元素
        负责：1，key类（见context的defaultModelType）；2，java类；3，查询类
        targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
        targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录
     -->
		<javaModelGenerator targetPackage="com.ybf.common.domain" targetProject="E:/git/ybf-xyx/ybf-xyx/src/main/java">
			<!--  for MyBatis3/MyBatis3Simple   自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；  -->
			<property name="constructorBased" value="false" />
			<property name="useActualColumnNames" value="true" />
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="false" />
			<!-- for MyBatis3 / MyBatis3Simple  是否创建一个不可变的类，如果为true，  那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类-->
			<property name="immutable" value="false" />
			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法-->
			<property name="trimStrings" value="true" />
			<!-- 设置一个根对象，
       如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
       注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
          1，属性名相同，类型相同，有相同的getter/setter方法；
    -->
			<!--	<property name="rootClass" value="com.sunon.core.base.BaseModel" />-->
		</javaModelGenerator>
		<!-- mybatis xml -->
		<sqlMapGenerator targetPackage="mappers"
						 targetProject="E:/mygit/nged/nged_shiro/src/main/resources">
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>
		<!-- dao -->
		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
       targetPackage/targetProject:同javaModelGenerator
       type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
           1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
           2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
           3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
       注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
   -->
		<javaClientGenerator targetPackage="com.web.dao"
							 targetProject="E:/mygit/nged/nged_shiro/src/main/java" type="XMLMAPPER">
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="false" />

			<!--<property name="rootInterface" value="com.sunon.core.base.BaseMapper"/>-->
		</javaClientGenerator>
		<!-- table -->
		<!-- 数据表 -->
		<table tableName="T_USER"  />
		<!--	<table tableName="T_PERMISSION"  />
            <table tableName="T_ROLE"  />
            <table tableName="T_ROLE_PERMISSION"  />
            <table tableName="T_USER_ROLE"  />-->
	</context>
</generatorConfiguration>